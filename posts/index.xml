<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>https://Chan-JZ.github.io/posts/</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Dec 2022 02:44:34 +1030</lastBuildDate>
    
	<atom:link href="https://Chan-JZ.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; Constructor Member Initializer List</title>
      <link>https://Chan-JZ.github.io/posts/constructorsinitializerlists/</link>
      <pubDate>Sun, 18 Dec 2022 02:44:34 +1030</pubDate>
      
      <guid>https://Chan-JZ.github.io/posts/constructorsinitializerlists/</guid>
      <description>Constructor Member Initializer List allows us to initialize a class&amp;rsquo; data members in the constructor. There 2 main ways for us to initialize data members in a constructor.
 Traditional way class Person { public: string pName; int age; Person() { pName = &amp;#34;Alice&amp;#34;; age = 0; } Person(string name) { pName = name; age = 0; } Person(string name, int val) { pName = name; age = val; } }; int main() { Person *s1 = new Person(); cout &amp;lt;&amp;lt; &amp;#34;pName: &amp;#34; &amp;lt;&amp;lt; s1-&amp;gt;pName &amp;lt;&amp;lt; &amp;#34;, age: &amp;#34; &amp;lt;&amp;lt; s1-&amp;gt;age &amp;lt;&amp;lt; endl; Person *s2 = new Person(&amp;#34;Bob&amp;#34;); cout &amp;lt;&amp;lt; &amp;#34;pName: &amp;#34; &amp;lt;&amp;lt; s2-&amp;gt;pName &amp;lt;&amp;lt; &amp;#34;, age: &amp;#34; &amp;lt;&amp;lt; s2-&amp;gt;age &amp;lt;&amp;lt; endl; Person *s3 = new Person(&amp;#34;Charlie&amp;#34;, 10); cout &amp;lt;&amp;lt; &amp;#34;pName: &amp;#34; &amp;lt;&amp;lt; s3-&amp;gt;pName &amp;lt;&amp;lt; &amp;#34;, age: &amp;#34; &amp;lt;&amp;lt; s3-&amp;gt;age &amp;lt;&amp;lt; endl; }  Output:</description>
    </item>
    
    <item>
      <title>Hyperstyle Installation</title>
      <link>https://Chan-JZ.github.io/posts/hyperstyleinstallation/</link>
      <pubDate>Sat, 17 Dec 2022 17:24:51 +1030</pubDate>
      
      <guid>https://Chan-JZ.github.io/posts/hyperstyleinstallation/</guid>
      <description>Installing Hyperstyle using Docker Hyperstyle is a convenient tool that is built on top of various existing linters (Pylint, PMD, etc). All of these linters are integrated and configured by Hyperstyle.
Authors: Jian Zhe Chan and Jiajun (Jason) Yu
Functionality  Runs linters for various programming languages including Python, Java, etc and parse their output. Print linter outputs to the terminal in the JSON format for easy data manipulation. Calculates the code quality value (EXCELLENT, GOOD, MODERATE, BAD) based on the linters&amp;rsquo; output.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::string class</title>
      <link>https://Chan-JZ.github.io/posts/cpp_string/</link>
      <pubDate>Sun, 11 Dec 2022 14:35:32 +1030</pubDate>
      
      <guid>https://Chan-JZ.github.io/posts/cpp_string/</guid>
      <description>In C++, we use the class std::string to store a sequence of characters, where we can perform various member functions and operators on the characters.
To use the std::string class mentioned above, simply include its header at the top of your .cpp file. (Note that the third line allows us to use identifiers in the std namespace without using the prefix std::)
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std; Normally, we would initialize a string variable in the following way:</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Function Call (Pass by value, Pass by reference, Pass by pointer)</title>
      <link>https://Chan-JZ.github.io/posts/mypost/</link>
      <pubDate>Tue, 29 Nov 2022 01:41:59 +1030</pubDate>
      
      <guid>https://Chan-JZ.github.io/posts/mypost/</guid>
      <description>In C++, the arguments of a function can be passed by 3 methods: pass by value, pass by pointer and pass by reference
callee: A function that is called by another
caller: A function that calls another function
 Pass by value This is the method is usually used when we want to perform some calculations in a function using the value of the parameters. When we call a function that takes in a single parameter with pass by value, a copy of the caller function&amp;rsquo;s variable is passed into the callee function as an argument, where it will become a local variable.</description>
    </item>
    
  </channel>
</rss>